"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
"""
import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup

from config import Command, WELCOME_MESSAGE, CORRECT_ANSWER, WRONG_ANSWER
from database.models import UserManager, WordManager
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ main.py)
bot_instance = None


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
class BotStates(StatesGroup):
    waiting_english_word = State()  # –û–∂–∏–¥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
    waiting_russian_word = State()  # –û–∂–∏–¥–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
    playing_game = State()  # –ò–≥—Ä–∞ –≤ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ


def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global bot_instance
    bot_instance = bot

    @bot.message_handler(commands=['start', 'cards'])
    def start_command(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        UserManager.create_user(user_id, username, first_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, WELCOME_MESSAGE)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É
        start_new_game(message)

    @bot.message_handler(func=lambda message: message.text == Command.NEXT)
    def next_word_handler(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—å—à–µ'"""
        start_new_game(message)

    @bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
    def add_word_handler(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'"""
        bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
            reply_markup=create_cancel_keyboard()
        )
        bot.set_state(message.from_user.id, BotStates.waiting_english_word, message.chat.id)

    @bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
    def delete_word_handler(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'"""
        user_id = message.from_user.id
        personal_words = WordManager.get_user_personal_words(user_id)

        if not personal_words:
            bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=create_main_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        keyboard = create_delete_words_keyboard(personal_words)
        bot.send_message(
            message.chat.id,
            "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )

    @bot.message_handler(state=BotStates.waiting_english_word)
    def process_english_word(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞"""
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            bot.delete_state(message.from_user.id, message.chat.id)
            start_new_game(message)
            return

        english_word = message.text.strip().title()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if data is None:
                    data = {}
                data['english_word'] = english_word
        except:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: {english_word}\n"
                f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:",
                reply_markup=create_cancel_keyboard()
            )
            bot.set_state(message.from_user.id, BotStates.waiting_russian_word, message.chat.id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if not hasattr(bot, '_temp_data'):
                bot._temp_data = {}
            bot._temp_data[message.from_user.id] = {'english_word': english_word}
            return

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: {english_word}\n"
            f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:",
            reply_markup=create_cancel_keyboard()
        )
        bot.set_state(message.from_user.id, BotStates.waiting_russian_word, message.chat.id)

    @bot.message_handler(state=BotStates.waiting_russian_word)
    def process_russian_word(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            bot.delete_state(message.from_user.id, message.chat.id)
            start_new_game(message)
            return

        user_id = message.from_user.id
        russian_word = message.text.strip().title()
        english_word = ""

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        try:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if data:
                    english_word = data.get('english_word', '')
        except:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            if hasattr(bot, '_temp_data') and user_id in bot._temp_data:
                english_word = bot._temp_data[user_id].get('english_word', '')
                del bot._temp_data[user_id]

        if not english_word:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            start_new_game(message)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –ë–î
        success = WordManager.add_user_word(user_id, english_word, russian_word)

        if success:
            words_count = UserManager.get_user_words_count(user_id)
            bot.send_message(
                message.chat.id,
                f"üéâ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                f"üá¨üáß {english_word} - üá∑üá∫ {russian_word}\n"
                f"üìö –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {words_count} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )

        bot.delete_state(message.from_user.id, message.chat.id)
        start_new_game(message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('delete_word_'))
    def delete_word_callback(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
        word_id = int(call.data.split('_')[2])
        user_id = call.from_user.id

        success = WordManager.delete_user_word(user_id, word_id)

        if success:
            words_count = UserManager.get_user_words_count(user_id)
            bot.answer_callback_query(call.id, "‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!")
            bot.edit_message_text(
                f"üóë –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!\n"
                f"üìö –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {words_count} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–≥—Ä–µ
        start_new_game(call.message)

    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def handle_game_answer(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ"""
        user_id = message.from_user.id

        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            correct_word = None
            try:
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    if data:
                        correct_word = data.get('correct_word')
            except:
                pass

            if not correct_word:
                start_new_game(message)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if message.text == correct_word['english_word']:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                words_count = UserManager.get_user_words_count(user_id)
                response = (
                    f"{CORRECT_ANSWER}\n"
                    f"üá∑üá∫ {correct_word['russian_word']} = üá¨üáß {correct_word['english_word']}\n"
                    f"üìö –ò–∑—É—á–∞–µ—Ç–µ —Å–ª–æ–≤: {words_count}"
                )
                keyboard = create_main_keyboard()
                bot.send_message(message.chat.id, response, reply_markup=keyboard)
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                response = (
                    f"{WRONG_ANSWER}\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: üá∑üá∫ {correct_word['russian_word']}"
                )
                # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                try:
                    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                        options = data.get('all_options', []) if data else []
                        if not options:
                            start_new_game(message)
                            return
                        keyboard = create_game_keyboard(options)
                        bot.send_message(message.chat.id, response, reply_markup=keyboard)
                except:
                    start_new_game(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            start_new_game(message)


def start_new_game(message):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    game_data = WordManager.get_random_word_with_options(user_id)

    if not game_data:
        bot_instance.send_message(
            message.chat.id,
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã!\n"
            "–í –±–∞–∑–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–ª–æ–≤–∞.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ë–î.",
            reply_markup=create_main_keyboard()
        )
        return

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        bot_instance.set_state(message.from_user.id, BotStates.playing_game, message.chat.id)

        with bot_instance.retrieve_data(message.from_user.id, message.chat.id) as data:
            if data is None:
                data = {}
            data['correct_word'] = game_data['correct_word']
            data['all_options'] = game_data['all_options']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if not hasattr(bot_instance, '_game_data'):
            bot_instance._game_data = {}
        bot_instance._game_data[user_id] = {
            'correct_word': game_data['correct_word'],
            'all_options': game_data['all_options']
        }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = create_game_keyboard(game_data['all_options'])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    question = f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {game_data['russian_word']}"
    bot_instance.send_message(message.chat.id, question, reply_markup=keyboard)


def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(
        types.KeyboardButton(Command.NEXT),
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD)
    )
    return keyboard


def create_game_keyboard(options):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä—ã"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    option_buttons = [types.KeyboardButton(option['english_word']) for option in options]
    keyboard.add(*option_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        types.KeyboardButton(Command.NEXT),
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD)
    )
    return keyboard


def create_cancel_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    return keyboard


def create_delete_words_keyboard(words):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    for word in words:
        button_text = f"üóë {word['english_word']} - {word['russian_word']}"
        callback_data = f"delete_word_{word['word_id']}"
        keyboard.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))

    return keyboard